public class HeapSortdown {
    public static void main(String[] args) {
        // Create an array with numbers from 1000 to 1
        int[] numbers = new int[1000];
        for (int i = 0; i < 1000; i++) {
            numbers[i] = 1000 - i;
        }

        // To perfom the Heapsort
        heapSort(numbers);

        // Output of the sorted array.
        for (int number : numbers) {
            System.out.println(number);
        }
    }

    // Heap sort implementation
    private static void heapSort(int[] arr) {
        int n = arr.length;

        // Build heap (rearrange array)
        for (int i = n / 2 - 1; i >= 0; i--) {
            heapify(arr, n, i);
        }

        // One by one extract an element from the heap
        for (int i = n - 1; i > 0; i--) {
            // Move current root to the end
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // Call max heapify on the reduced heap
            heapify(arr, i, 0);
        }
    }

    // To heapify a subtree rooted with node i which is an index in arr[]
    private static void heapify(int[] arr, int n, int i) {
        int largest = i;
        int left = 2 * i + 1;
        int right = 2 * i + 2;

        // If left child is smaller than root
        if (left < n && arr[left] > arr[largest]) {
            largest = left;
        }

        // If right child is smaller than largest so far
        if (right < n && arr[right] > arr[largest]) {
            largest = right;
        }

        // If largest is not root
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            // Recursively heapify the affected sub-tree
            heapify(arr, n, largest);
        }
    }
}
