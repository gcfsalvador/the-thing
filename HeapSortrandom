public class HeapSortrandom {
    public void sort(int arr[]) {
        int n = arr.length;

        // Build heap (rearrange array)
        for (int i = n / 2 - 1; i >= 0; i--)
            heapify(arr, n, i);

        // One by one extract an element from heap
        for (int i = n - 1; i >= 0; i--) {
            // Move current root to end
            int temp = arr[0];
            arr[0] = arr[i];
            arr[i] = temp;

            // call max heapify on the reduced heap
            heapify(arr, i, 0);
        }
    }

    // To heapify a subtree rooted with node i which is
    // an index in arr[]. n is size of heap
    void heapify(int arr[], int n, int i) {
        int largest = i; // Initialize largest as root
        int l = 2 * i + 1; // left = 2*i + 1
        int r = 2 * i + 2; // right = 2*i + 2

        // If left child is larger than root
        if (l < n && arr[l] > arr[largest])
            largest = l;

        // If right child is larger than largest so far
        if (r < n && arr[r] > arr[largest])
            largest = r;

        // If largest is not root
        if (largest != i) {
            int swap = arr[i];
            arr[i] = arr[largest];
            arr[largest] = swap;

            // Recursively heapify the affected sub-tree
            heapify(arr, n, largest);
        }
    }

    /* A utility function to print array of size n */
    static void printArray(int arr[]) {
        int n = arr.length;
        for (int i = 0; i < n; ++i)
            System.out.print(arr[i] + " ");
        System.out.println();
    }

    // Driver program
    public static void main(String args[]) {
        int[] arr = { 777, 276, 680, 581, 576, 851, 959, 343, 614, 563, 826, 969, 964, 663, 407, 823, 415, 568, 122, 32,
                294, 832, 222, 90, 877, 309, 722, 7, 852, 247, 239, 491, 595, 846, 790, 286, 977, 526, 612, 275, 284,
                602, 18, 409, 21, 753, 96, 537, 82, 524, 175, 468, 683, 996, 590, 976, 666, 857, 435, 152, 25, 338, 201,
                993, 983, 813, 120, 947, 986, 779,
                381, 834, 24, 218, 926, 373, 421, 324, 647, 961, 177, 845, 898, 453, 182, 754, 762, 824, 405, 400, 671,
                917, 890, 675,
                723, 340, 452, 942, 965, 714, 698, 475, 98, 27, 420, 99, 256, 913, 527, 164, 398, 456, 791, 60, 463,
                472, 901, 859, 950, 426, 982, 732, 887, 408, 820, 548, 681, 245, 794, 605, 929, 148, 238, 531, 911, 827,
                140, 635, 4, 35, 642, 842, 764,
                628, 925, 85, 269, 632, 686, 481, 645, 115, 16, 244, 437, 535, 396, 251, 634, 640, 597, 552, 797, 906,
                205, 64, 919, 928, 631, 896, 388, 700, 784, 30, 442, 138, 168, 224, 72, 130, 844, 728, 946, 839, 317,
                661, 156, 50, 221, 352, 968, 378, 69, 696, 287, 10, 869, 768, 958, 840, 730, 347, 656, 147, 594, 907,
                936, 65, 12, 206, 423, 555, 51, 938, 735, 42, 990, 455, 523, 652, 292, 825, 494, 124, 650, 676, 498,
                685, 607, 211, 967, 237, 329, 142, 436, 739, 418, 44, 439, 395, 367, 414, 225, 692, 577, 545, 956, 119,
                143, 76, 580, 953, 575, 52, 321, 521, 766, 354, 776, 234, 998, 649, 572, 196, 562,
                538, 350, 15, 314, 370, 419, 424, 622, 278, 660, 782, 31, 721, 417, 598, 288, 162, 112, 616, 705, 837,
                923, 22, 101, 266, 411, 726, 715, 166, 190, 136, 487, 326, 258, 690, 386, 368, 747, 165, 200, 860, 181,
                281, 268, 473, 915, 528, 319, 219, 322, 542, 283, 664, 353, 325, 94, 773, 503, 174, 864, 918, 856, 541,
                510, 688, 759, 716, 430, 499, 134, 78, 232, 447, 935, 710, 606, 482, 653, 772, 741, 712, 88, 351, 327,
                392, 796, 952, 980, 342, 188, 74, 900, 882, 836, 745, 624, 736, 75, 208, 781, 95, 261, 831, 111, 454,
                876, 518, 989, 881, 5, 489, 725, 410, 536, 815, 506, 11, 835, 191, 428, 443, 578, 806, 280, 365, 749,
                97, 740, 522, 691, 879, 979, 77, 307, 899, 493, 198, 871, 525, 476, 141, 133, 450, 466, 372, 28, 1000,
                271, 425, 895, 29, 104, 868, 737, 394, 374, 872, 19, 689, 584, 304, 720, 748, 971, 974, 566, 648, 171,
                301, 858, 744, 713, 464, 346, 6, 838, 704, 59, 123, 257, 897, 828, 356, 811, 731, 960, 914, 904, 729,
                758, 893, 718, 699, 282, 812, 908, 849, 677, 231, 888, 146, 792, 431, 809, 13, 460, 769, 203, 883, 853,
                176, 361, 226, 233, 514, 108, 532, 300, 496, 474, 817, 760, 46, 665, 821, 970, 850, 507, 673, 242, 114,
                711, 68, 954, 434, 364, 40, 149, 204, 592, 695, 761, 248, 215, 128, 66, 1, 829, 783, 228, 891, 265, 833,
                441, 763, 195, 793, 867, 593, 397, 582, 668, 778, 105, 702, 139, 480,
                886, 151, 296, 561, 627, 574, 774, 600, 975, 389, 579, 619, 103, 997, 659, 127, 55, 550, 483, 339, 320,
                173, 106, 556,
                988, 478, 972, 23, 738, 654, 669, 865, 629, 808, 638, 477, 609, 655, 694, 170, 302, 432, 546, 217, 194,
                591, 366, 308,
                192, 847, 719, 785, 3, 963, 297, 620, 438, 279, 909, 973, 81, 618, 505, 371, 949, 230, 799, 706, 387,
                557, 457, 236, 874, 509, 310, 285, 289, 39, 586, 670, 377, 336, 672, 771, 687, 547, 93, 393, 875, 746,
                184, 129, 937, 951, 318, 807, 216, 429, 497, 921, 357, 625, 540, 646, 751, 889, 385, 701, 186, 254, 551,
                459, 79, 819, 945, 91, 470, 613, 878, 145, 674, 293, 943, 757, 185, 262, 544, 207, 501, 892, 978, 549,
                404, 359, 172, 70, 89, 708, 240, 798, 227, 243, 570, 375, 529,
                554, 564, 682, 467, 948, 930, 743, 684, 355, 814, 116, 9, 596, 109, 92, 502, 260, 569, 816, 330, 209,
                916, 780, 67, 733, 519, 84, 272, 235, 445, 511, 391, 362, 583, 249, 862, 427, 100, 941, 345, 727, 62,
                33, 290, 789, 788, 43, 679, 912, 693, 841, 639, 303, 861, 866, 252, 571, 157, 504, 323, 273, 331, 636,
                416, 2, 905, 158, 512, 135, 86, 161, 709, 380, 220, 255, 193, 131, 433, 379, 985, 894, 155, 57, 144,
                880, 939, 137, 179, 765, 337, 533, 641, 449, 461, 159, 626, 121, 335, 870, 818, 56, 229, 848, 259, 277,
                516, 63, 927, 311, 465, 803, 787, 644, 770, 922, 360, 153, 603, 534, 189, 267, 601, 643, 637, 962, 163,
                486, 117, 197, 617, 107, 539, 71, 678, 401, 132, 383, 306, 604, 565, 560, 73, 328, 110, 305, 610,
                299, 382, 49, 934, 931, 755, 932, 484, 717, 995, 390, 924, 703, 902, 183, 34, 150, 802, 334, 599, 508,
                775, 210, 316, 495, 348, 750, 855, 344, 488, 332, 801, 752, 80, 804, 805, 992, 446, 263, 662, 490, 559,
                167, 399, 264, 213, 933, 270, 999, 633, 37, 87, 843, 274, 492, 422, 513, 250, 920, 707, 61, 608, 810,
                500, 469, 246, 520, 199, 125, 118, 333, 667, 944, 884, 14, 180, 543, 795, 724, 863, 440, 48, 363, 991,
                623, 984, 957, 822, 558, 313, 940, 987, 458, 903, 214, 734, 955, 341, 479, 45, 38, 697, 295, 589, 800,
                126, 658, 630, 854, 585, 515, 651, 444, 402, 994, 742, 369, 451, 53, 657, 223, 47, 253, 241, 981, 567,
                448, 54, 910, 517, 187, 403, 58, 587, 154, 462, 412, 298, 36, 966, 26, 17, 530, 212, 756, 471, 553, 786,
                588, 291, 485, 358, 169, 621, 113, 178, 611, 767, 573, 315, 376, 312, 202, 160, 349, 406, 8, 83, 384,
                41, 830, 615, 20, 413, 885, 102, 873 };
        int n = arr.length;

        HeapSort ob = new HeapSort();
        ob.sort(arr);

        System.out.println("Sorted array is");
        printArray(arr);
    }
}
